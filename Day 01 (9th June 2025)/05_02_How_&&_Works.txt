How && works?
=============
How the `&&` Operator Works in JavaScript and React  

The `&&` (Logical AND) operator is used to evaluate two expressions and returns a value based on the following rules:

---
ðŸ”¹ In JavaScript
Behavior of `&&`
- The `&&` operator returns the first falsy value or the last truthy value if all are truthy.
- It does not return `true` or `false` unless the actual values being evaluated are `true` or `false`.

#Examples:

console.log(true && false);   // false  (first falsy value)
console.log(false && true);   // false  (first falsy value)
console.log(true && "Hello"); // "Hello" (last truthy value)
console.log("Hi" && "Hello"); // "Hello" (last truthy value)
console.log(0 && "Hello");    // 0 (first falsy value)
console.log("" && "Hello");   // "" (first falsy value)
console.log(null && "Hi");    // null (first falsy value)
console.log(undefined && "Hi"); // undefined (first falsy value)

- If the first operand is falsy, it is immediately returned.
- If the first operand is truthy, the second operand is returned.

In React (and JavaScript in general), values like 0, null, "" (empty string), undefined, and false are called falsy values, meaning they are treated as false in conditional rendering.

---

ðŸ”¹ In React
Using `&&` for Conditional Rendering
- In React, `&&` is often used to conditionally render an element or component.
- If the left-hand side evaluates to `true`, the right-hand side (JSX) is rendered.
- If the left-hand side evaluates to `false`, nothing is rendered (i.e., React ignores it).

#Example 1: Rendering Based on Condition

const showMessage = true;

function App() {
  return (
    <div>
      <h1>Welcome!</h1>
      {showMessage && <p>This message is visible.</p>}
    </div>
  );
}

ðŸ”¹ If `showMessage` is `true`, `<p>This message is visible.</p>` will be rendered.  
ðŸ”¹ If `showMessage` is `false`, nothing will be rendered.

#Example 2: Be Careful with `0`

const count = 0;
return <p>Messages: {count && "New Messages"}</p>;

ðŸ”¹ Output will be: `Messages:` (empty, because `0` is falsy).  
ðŸ”¹ Fix: Use a ternary operator:

<p>Messages: {count > 0 ? "New Messages" : "No new messages"}</p>
-----X-----X-----X-----
First React App
===============
Dev Env Setup
-------------
Step1: Install Node JS and Npm from: https://nodejs.org/en/

=> Make sure to install the even version (20, 22, etc).
=> These are the LTS versions

Step2: Check installations with commands: 
a) node -v
b) npm -v

Step 3: Install VSCode

VS Code Settings
================
Live Server
-----------
Install Live Server from Ritwik Dey

Prettier
--------
=> Install Prettier (extension) by prettier.io	

Format on Save
--------------
=> Enable format on save: Go to File -> Preferences -> Settings -> "Format on Save"

React Snippets
--------------
=> Install React snippets (extension) by dsznajder 
=> It helps generate code
=> To generate functional component -> type rfce
=> To generate arrow functional component -> type rafce

How to Create the App?
======================
Till 2022
=========
Create React App
----------------
=> It was a command line tool to create react apps
=> It was also known as CRA
=> Uptil 12th April, 2022 CRA was the official tool to create react apps
=> CRA is now officially dead

Since 2022
==========
Vite
----
=> Vite is a modern frontend build tool that provides an extremely fast development environment and an optimized production build system. 
=> It is particularly popular for React, Vue, and other modern JavaScript frameworks.

Key Features of Vite
--------------------
1. Blazing Fast Development  
   => Uses native ES modules and esbuild for lightning-fast startup and hot module replacement (HMR).
   
2. Instant Hot Module Replacement (HMR)
   => Updates your code instantly without reloading the page.
   => No more slow refreshes

3. Optimized Production Build
   => Uses Rollup for efficient bundling, tree-shaking, and code-splitting.

4. Zero Configuration Setup  
   => Works out of the box for React, Vue, Svelte, and other frameworks.
   
5. Supports TypeScript and JSX
   => No extra configuration needed.

Create and Run App
------------------
Step 1: Install Vite and create app

**Command => npm create vite@latest

OR, we can specify the version of Vite

**Command => npm create vite@4.1.0

In between, options to select:
1. OK to proceed? (y) => y
2. Name of project: react-concepts
3. Select a framework => React
4. Select a variant => JavaScript

Step 2: Navigate inside the project

**Command => cd react-concepts

Step 3: Install dependencies in the project

**Command => npm install

OR, we can use `i` for install

**Command => npm i

Step 4: Install Bootstrap (optional - as per use)

**Command => npm install bootstrap --save

=> After installation, import 'bootstrap/dist/css/bootstrap.min.css' in main.jsx

Step 5: Install Axios (optional - as per use)

**Command => npm install axios --save

=> After installation of bootstrap and axios see 
	- package.json => dependencies and locate both
	- check node_modules for bootstrap and axios folders

Step 6: Run the project

**Command => npm run dev

As a result development server will be started on `http://localhost:5173`.

Step 6: Debugging

=> After app execution, on the browser open dev tools -> console window.

=> You will notice: Download the React DevTools for a better development experience: https://reactjs.org/link/react-devtools

=> Click it and then Install it for your browser: Chrome/Edge

=> Post installation, open dev tools, re-run the app and notice react icons or component text in parent menu.
=> Click on components, and we see "App", Click on "App" and observe little details

=> Create any new component: <Hi/> & use it inside <App/>, refresh the browser & see component hierarchy in dev tools

Change port
-----------
=> Vite by default configures port 5173 to run the application
=> But we can configure any other server port.

Steps:
------
Step1: Open vite.config.js

Step2: Locate the below code:

export default defineConfig({
  plugins: [react()]
})

Step3: Change the above to

export default defineConfig({
  plugins: [react()],
  server : {
    port : 3000
  }
})

Step4: Kill the server wih Ctrl + C

Step5: Re-run app

Command => npm run dev

The application will start on port 3000

Why Use Vite Instead of Webpack?
--------------------------------
| Feature            | Vite    | Webpack  |
|--------------------|---------|----------|
| Startup Speed      | Instant | Slow     |
| HMR Speed          | Fast    | Moderate |
| Configuration      | Minimal | Complex  |
| ES Modules Support | Yes     | No       |

Vite is the best choice for modern React, Vue, and Svelte projects where speed and simplicity are priorities.
-----X-----X-----X-----
React Project Structure
=======================
react-concepts/
│── node_modules/        # Installed dependencies
│── public/              # Static assets (favicons, images, etc.)
│── src/                 # Source code (React components, styles, assets)
│   │── assets/          # Static assets used inside components (e.g., images, logos)
│   │── components/      # Reusable UI components [to be created manually during development]
│   │── services/        # Services [to be created manually during development]
│   │── pages/           # Page-level components (for routing)[to be created manually during dev]
│   │── App.css          # Global styles for App component
│   │── App.jsx          # Root React component
│   │── index.css        # CSS for index.html (global styling)
│   │── main.jsx         # Entry point for the React app
│── .gitignore           # Files to ignore in Git
│── eslint.config.js     # Defines ESLint rules for code linting.
│── index.html           # Main HTML template
│── package-lock.json    # Ensures consistent dependency versions.
│── package.json         # Dependencies and scripts
│── README.md            # Project documentation
│── vite.config.js       # Vite configuration file

When we create a React project using Vite, the project structure is optimized for performance and fast development.

Folders
--------
1. node_modules
=> All the dependencies are installed in this folder
=> It is created when we execute: npm install 

2. public
=> Initially it contains only 1 file: vite.svg, i.e. Vite logo
=> It can be used to:
	=> Store static assets like images, icons, and fonts.  
	=> Serve files directly without Vite’s processing.  
	=> Store global configuration files (e.g., `config.json`).  
	=> Include SEO-related files like `robots.txt` and `manifest.json`.  
	=> Provide assets with absolute paths accessible from the root URL.

3. src
=> This is where we will be mainly working. 
=> It contains following files: App.css, App.jsx, index.css, main.jsx and a folder: assets 

4. src/assets
=> It stores images, fonts, or other files that Vite processes, optimizes, and includes in the final bundle.

Key Files & Their Purpose  
-------------------------
1.`index.html` (Root HTML File)
- Located in the project root, Vite uses this as the entry point.  
- Contains a `<div id="root"></div>` where React mounts the app.  

2. `main.jsx` (React Entry File)
- This is the entry point of the React app.  
- It renders `<App />` inside `#root` in `index.html`.  

- Example:
  
	import { StrictMode } from "react";
	import { createRoot } from "react-dom/client";
	import "./index.css";
	import App from "./App.jsx";

	createRoot(document.getElementById("root")).render(
	  <StrictMode>
		<App />
	  </StrictMode>
	);
  
StrictMode 
----------
=> It is a wrapper component in React that helps developers identify potential issues in their applications. 
=> It does not render anything in the UI but enables additional checks and warnings during development.

Features of `React.StrictMode`
=> Identifies Unsafe Lifecycles – It detects deprecated lifecycle methods in class components.
=> Warns About Side Effects – It highlights side effects in `useEffect()` by intentionally rendering components twice in development mode.
=> Checks for Legacy API Usage – It flags legacy string ref APIs and `findDOMNode()` usage.
=> Detects Unexpected Side Effects – It helps find state updates outside of event handlers.
=> Ensures Best Practices – Encourages using modern React features and warns about future deprecations.

3. `App.jsx` (Main Component)

=> This is the component that replaces the `div` with id `root` in index.html
=> This is the root component where all other components are imported.  
=> Example:

  function App() {
    return (
      <div>
        <h1>Hello, Vite + React!</h1>
      </div>
    );
  }

  export default App;

4. `vite.config.js` (Vite Configuration)
=> Used to configure Vite settings like aliases, plugins, and server settings.  
=> Example:

  import { defineConfig } from 'vite';
  import react from '@vitejs/plugin-react';

  export default defineConfig({
    plugins: [react()],
  });
  
5. `package.json` (Dependencies & Scripts)
=> Contains project dependencies and scripts.  
=> Example:
  
  {
    "scripts": {
      "dev": "vite",
      "build": "vite build",
      "preview": "vite preview"
    },
    "dependencies": {
      "react": "^18.2.0",
      "react-dom": "^18.2.0",
	  "axios": "^1.3.4"
    },
    "devDependencies": {
      "@vitejs/plugin-react": "^4.0.0",
      "vite": "^4.3.0",
	  "eslint": "^8.10.0",
	  "jest": "^29.5.0"
    }
  }
 
6. `package-lock.json`
=> if we have npm package manager, we will have this file. In case of yarn, we will have yarn-lock.json
=> It makes sure that we have consistent installation of dependencies

7. index.css => style sheet for index.html

8. .gitignore
=> It is a text file that tells Git which files or folders to ignore in a project. 
=> A local .gitignore file is usually placed in the root directory of a project.

9. README.md
=> README file is used to communicate important information about your project
=> Gitignore and README.md are handy in case we use Code Management Tool => Git
=> It contains node_modules and it is not supposed to be pushed to Git

10. `eslint.config.js`
=> Here we configure ESLint rules and plugins to enforce coding standards and catch errors in our React project.
=> It is a static code analysis tool for identifying problematic patterns in JavaScript code

11. index.css and App.css are used to style index.html and App.jsx
-----X-----X-----X-----
Dependencies v/s Dev Dependencies
=================================
Dependencies
-------------
=> There are certain libraries that our app need to run, such as React, Axios etc.
=> These dependencies are needed by our application everytime we run it
=> These are known as dependencies

As in code:

"dependencies": {
  "react": "^18.2.0",
  "react-dom": "^18.2.0",
  "axios": "^1.3.4"
}

=> For ex: our application will always need react, react-dom and axios to run
=> Install a package as a dependency:  

**Command => npm install axios

Dev dependencies
----------------  
=> Certain tools are needed only during development, such as Webpack and ESLint.  
=> These are not required when the application runs in production.  
=> They are known as dev dependencies  
=> For Ex: A React app **can run without** ESLint and Webpack in production.

As in the code: 

"devDependencies": {
  "@vitejs/plugin-react": "^4.0.0",
  "vite": "^4.3.0",
  "eslint": "^8.10.0",
  "jest": "^29.5.0"
}

- Vite, eslint and jest are development and build tools, so they are listed under devDependencies.  
- They are only needed during development (for fast HMR, bundling, testing, code corrections etc.) and to build the final production files.  
- Once the app is built (`npm run build`), the output is just static files (`dist/` folder), and they are no longer required in production.

So, the React app can run in production without Vite, ESLint and Jest as long as the build process has been completed.

=> Install a package as a devDependency:  

**Command => npm install eslint --save-dev

OR, simply

**Command => npm i eslint -D

Why Separate Them?  
------------------
=> Smaller Production Build – Dev dependencies don’t get included, reducing app size.  
=> Faster Installations – Production servers install only `dependencies`.  
=> Security – Reduces attack surface by avoiding unnecessary packages in production.
-----X-----X-----X-----
Control Flow
============
In a React application created with Vite, our app follows a structured control flow from initialization to rendering. Here's how it works:

1. Project Initialization
=> When we create a React app using Vite (`npm create vite@latest my-app`), Vite sets up a development server and provides a lightweight configuration optimized for React.

2. Entry Point (`index.html`)
=> Unlike Create React App (CRA), Vite serves `index.html` as the entry point instead of a bundled `index.js`.
=> Inside `index.html`, we find:
  
  <script type="module" src="/src/main.jsx"></script>
  
  Here main.jsx is included in the file.
  This loads our React application.

3. Main Entry File (`main.jsx` or `main.tsx`)
=> This is the first React-related file executed. Typically, it contains:

  createRoot(document.getElementById('root')).render(
    <StrictMode>
      <App />
    </StrictMode>
  );
  
What Happens Here?
=> `ReactDOM.createRoot()` initializes React's concurrent rendering.
=> `render()` mounts the `<App />` component inside the `root` div.
=> `React.StrictMode` enables development warnings (not in production).

4. Root Component (`App.jsx`)
=> This component is the core of our app. Example:

  function App() {
    return <h1>Hello, React with Vite!</h1>;
  }

  export default App

=> It defines the component tree.
=> It may use React Router, Context API, or Redux.

5. Component Rendering & State Management
=> React processes and renders components hierarchically.
=> It manages state changes via `useState`, `useReducer`, or external libraries.

6. Vite’s Role in Development
=> Hot Module Replacement (HMR): React components update in real time without refreshing the page.
=> ES Module Support: Vite usesnative ES Modules instead of Webpack bundling.

7. Production Build (`npm run build`)
=> Vite optimizes and bundles our app efficiently using Rollup.
=> It generates the `dist/` folder containing minified assets.

Summary of Control Flow
-----------------------
1. Browser loads `index.html` → Runs `main.jsx`
2. `main.jsx` mounts `App.jsx` to `root`
3. React renders components hierarchically
4. State, Effects, and Events handle UI updates
5. Vite enables fast development with HMR
6. On build, Vite optimizes the app for production

This structure ensures fast builds, efficient updates, and optimized performance for our React application.
-----X-----X-----X-----
File Names
----------
=> The names must be meaningful, concise, short and crisp
=> The names should be in PascalCase

Naming Conventions
==================
camelCase
---------
=> It is used for variables, functions/methods, properties inside objects, file names, etc.
=> Capitalization of each word, except the first, is done.

PascalCase
----------
=> It is used for component names, class names, types, etc.
=> Capitalization of each word is done.

snake_case
----------
=> It is not common in javascript.
=> Each word is separated by “_” and is in small letters

kebab-case
----------
=> It is common for file names, css classes, ids, etc.
=> Each word is separated by hyphen (-)
-----X-----X-----X-----
File Extensions
===============
File Extensions in a React Application  

When developing a React application, the following file extensions are commonly used:

1. JavaScript Files  
=> `.js` → Standard JavaScript files  
=> `.jsx` → JavaScript files containing JSX (optional, but helps with readability in some setups)  

Example:  
=> `App.js` or `App.jsx`  
=> `Header.js` or `Header.jsx`  

2. TypeScript Files (if using TypeScript)  
=> `.ts` → Standard TypeScript files  
=> `.tsx` → TypeScript files containing JSX  

Example:  
=> `App.tsx` (React component with JSX and TypeScript)  
=> `utils.ts` (Utility functions without JSX)  

Which Extension to Use for React Components?  
=> If using JavaScript: `.js` (or `.jsx` if JSX is written)  
=> If using TypeScript: `.ts` (or `.tsx` if JSX is written woth Typescript)
-----X-----X-----X-----X-----